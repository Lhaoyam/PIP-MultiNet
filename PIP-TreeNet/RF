import math
import joblib
import numpy as np
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import confusion_matrix, roc_auc_score, log_loss
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, cross_val_predict, StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline


rf_params = {
    # 'n_estimators': 300,    
    # 'max_depth': 15,      
    # 'min_samples_split': 7,   
    # 'min_samples_leaf': 1, 
    # 'max_features': 'sqrt',   
    # 'class_weight': 'balanced', 
    'oob_score': True, 
    # 'n_jobs': -1,
    # 'class_weight': {0:1627, 1: 1245},  
    # 'random_state': 42
}


model = make_pipeline(
   
    RandomForestClassifier(**rf_params) 
)

cv = StratifiedKFold(n_splits=5)
y_pred = cross_val_predict(model, X_new, y_new, cv=cv, method='predict')
y_proba = cross_val_predict(model, X_new, y_new, cv=cv, method='predict_proba')[:, 1]


model.fit(X_new, y_new)
oob_score = model.named_steps['randomforestclassifier'].oob_score_
print(f"OOB Score: {oob_score:.4f}")

# joblib.dump(model, 'single_rf_model.joblib')


def safe_divide(a, b):
    return a / b if b != 0 else 0


cm = confusion_matrix(y_new, y_pred)
TN, FP, FN, TP = cm.ravel()

AAC = (TP + TN) / (TP + TN + FP + FN)
Sn = safe_divide(TP, (TP + FN))
Sp = safe_divide(TN, (TN + FP))
MCC_numerator = (TP * TN - FP * FN)
MCC_denominator = math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))
MCC = safe_divide(MCC_numerator, MCC_denominator)
AUC = roc_auc_score(y_new, y_proba)
logloss = log_loss(y_new, y_proba)

print(f" (AAC): {AAC:.4f}")
print(f" (Sn): {Sn:.4f}")
print(f" (Sp): {Sp:.4f}")
print(f" (MCC): {MCC:.4f}")
print(f" {AUC:.4f}")
print(f" {logloss:.4f}")
print(cm)


rf_model = model.named_steps['randomforestclassifier']
importances = rf_model.feature_importances_

sorted_idx = importances.argsort()[::-1]
feature_names = X_new.columns if hasattr(X_new, 'columns') else [f'Feature_{i}' for i in range(X_new.shape[1])]
for i in sorted_idx[:10]:
    print(f"{feature_names[i]}: {importances[i]:.4f}")
